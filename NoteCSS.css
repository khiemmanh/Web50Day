/* (1. Flexbox trong CSS
https://viblo.asia/p/giai-thich-hoat-dong-cua-flexbox-thong-qua-anh-gif-ByEZkp14lQ0 )
*/
.container{
    display: flex;
    flex-direction: column-reverse; /* change main axis is row or colume */
    justify-content: flex-start; /* căn chỉnh các items trên main axis, căn giữa thì cần set hight cho container */
    align-items: flex-end;
    flex-wrap: wrap-reverse; /* item bị wrap sẽ lên trên */
    height: 90hv; /* 90% khung nhìn: 90vw */
    transition: flex 0.7s ease-in;

}

.item{
    align-self: flex-end;
    margin: auto;
}


/* 2. CSS Variable - Cách đặt biến trong CSS */
:root{
    /* Đây là biến Global, dùng được mọi nơi trong file .css */
    --text-color: green;
}

h1{
    color: var(--text-color);
}

h2{
    /* Đây là biến local */
    --my-color: red;
    color: var(--my-color);
}

/* (3. CSS Unit - các đơn vị trong CSS
    - Absolute units(px, pt, cm, mm, inch, pc) = tuyệt đối, không bị thay đổi
    - Relative units(%, rem, em, vw, vh, vmin, vmax, ex, ch) - tương đối, kích thước sẽ bị thay đổi
        - vh: viewport hight
        - vw: viewport width
        - rem: 1 đơn vị phục thuộc vào thẻ html
        - em: 1 đơn vị phụ thuộc vào thẻ cha gần nhất chứa nó đã được định nghĩa (VD thẻ cha định nghĩa font-size: 50px))
*/


/* (4: CSS padding, border, margin) 
    - Compare to between Padding and Margin
    - Border và padding làm tăng tổng kích thước của element
    - margin mục đích tạo khoảng các với các element khác (không làm tăng kích thước của element)
*/

.border{
    border-width: 10px;
    border-style: solid; /* default with là 2x */
    border-radius: 5px;
    border-color: brown;
}



/* (5. CSS Box-sizing 
    box-sizing: border-box; giữ nguyên tổng kích thước của element, khi mà padding or border không quá lớn )
*/

.box{
    width: 100px;
    height: 100px;
    background-color: cadetblue;
    padding: 16px;
    border: 2px solid #333;
    box-sizing: border-box; /* Tổng element box được giữ nguyên là 100px. Nhưng content chỉ còn 64px (vì -2*16px padding- 2*2px border) */
}


/* (6. background-clip 
    Mục đích chỉ đổi màu background cho content. Hay padding + content. Hay (border + padding + content)
    VD: Muốn đổ màu background chỉ cho content thôi (ko có padding và border)
*/

.backgroundclip{
    /* background-clip sử dụng cho background-color */
    background-clip: border-box; /* background for border + padding + content */
    background-clip: padding-box; /* background for  padding + content */
    background-clip: content-box; /* background for  only content */
}


/* 7. CSS background-image 
    - background-size
        - contain: thay đổi kích thước đảm bảo tỷ lệ kích thước ảnh hiển thị đầy đủ.
        - cover: Thay đổi kích thước hình nền để bao phủ toàn bộ vùng chứa, ngay cả khi nó phải kéo dài hình ảnh hoặc cắt một chút khỏi một trong các cạnh
*/

.backgroundimage{
    background-image: linear-gradient(95deg, red, rgba(255, 255, 0, 0.5)), url(imagelink01);
    background-image: url(imagelink), url(imagelink02);
    background-size: auto; /* https://developer.mozilla.org/en-US/docs/Web/CSS/background-size */
    background-repeat: no-repeat; /* repeat-x or repeat-y  */

    /* background-origin giống với background-clip
         - background-origin sử dụng cho background-image
         - background-clip sử dụng cho background-color */
    background-origin: content-box;
    background-position: top -20px right 20%;
}


/* (8. CSS function
    -var(), linear-gradient(), rgba(), rgb(), calc(), attr()
        - rgba(): có thông số anpha để tạo màu trong suốt
        - attr(): sử dụng với lớp giả ( ::after, ::before)
*/

/* (9. CSS pseudo-classes - lớp giả 
    - :root tham chiếu đến <html> elment 
    - :hover
    - :active chỉ được kích hoạt khi click và giữ chuột vào element
    - :first-child
    - :last-child )
*/

h1:hover{
    color: brown;
}


/* 10. CSS pseudo-element - phần tử giả 
    - ::before
    - ::after
    - ::first-letter
    - ::first-line
    - ::selection

    Có thể tạo ra thêm element mà không cần phải thêm thẻ html
*/

h1::first-letter{
    font-size: 50px; /* Chữ cái đầu tiên sẽ là có size to hơn (VD: CSS thì chữ 'C' có size lớn nhất) */
}

h1::selection{
    background-color: beige;
    /* Nếu click trái chuột và chọn các text của thẻ h1 này thì background-color sẽ bị đổi nàu */
}


/* 11. CSS Position 
    - Relative: Sẽ lấy chính vị trí của đối tượng đó làm mốc mà không bị phụ thuộc đối tượng nào khác.
    - Absolute: Một đối tượng phụ thuộc vào một đối tượng khác
    - Fixed: Một đối tượng phụ thuộc và browser
    - Sticky: Bám dính, khác với Fixed, VD khi đối tượng di chuyển từ giữa lên top:0 thì sẽ bị fix lại giống thuộc tính fixed

    https://youtu.be/h1No10BHI5Y?si=xEoYhUZx9MN1GSXT
*/

.h1{
    /* So sánh với margin?
    Khác với margin là nó di chuyển top, left, right,.. không là ảnh hưởng đến các element khác
    Mà nó sẽ đè lên trên các element còn lại */
    position: relative;
    top: 50px;
    left: 50px;
}

.h2{
    /* Phụ thuộc vào thẻ cha gần nhất có thuộc tính position (không nhất thiết phải là relative)
    Được sử dụng khi có một thẻ con cần được di chuyển quanh một thẻ cha là relative
    VD: Khi click và nút thông báo thì có popup hiện nên
        - khi đó popup hiện nên là thẻ absolute
        - icon quả chuông sẽ là thẻ cha dùng relative 
        (tại sao thẻ này lại cần relative vì thẻ popup đã là absolute nên cần thẻ cha gần nhất có thuộc tính position)  
        */
    background-image: url(./Common/image_NoteCSS/11.absolute_phụ_thuộc_vào_thẻ_có_thuộc_tính_position_gần_nhất.png);
    width: 50px;
    height: 50px;
    position: absolute;
    /* top và left sẽ được ưu tiên nếu có cả 4 thuộc tính(top, left, right, bottom) */
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;

    /* Nếu muốn thẻ absolute có kích thước bằng thẻ cha thì:
        - Không cần set width, hight
        - Set top, left, right, bottom: 0     
    */
}


/* 12. CSS FlexBox 
    - https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox
    - Căn giữa item
*/

h1{
    background-image: 
        url(./Common/image_NoteCSS/12_CSS_FlexBox_model.png),
        url(./Common/image_NoteCSS/12_flex-basis.png);

    display: flex;
    flex-direction: column; /* defalt is row */
    flex-wrap: wrap; /*  
        - wrap-reverse: item bị wrap sẽ di chuyển lên trên
        - wrap: item bị wrap sẽ di chuyển xuống dưới */
    flex-basis: 50px; /* 
        Dùng để set size cho main_size 
        - 30% */
    justify-content: center; /*  
        Căn chỉnh các item theo chiều main_axit (default là theo chiều ngang)
        Dùng cho element cha (flex_container)
        - flex-start
        - flex-end
        - center
        - space-between: chia đều khoảng các giữa các item, nhưng 2 item ngoài cùng không có khoảng cách
        - space-around: có chia khoảng cách cho 2 bên cạnh */
    justify-self: center; /* 
        Sử dụng cho element con (flex_item) 
        - flex-start
        - flex-end
        - center */
    align-content: center; /*
        Căn chỉnh các item theo chiều cross_axit (defalt là theo chiều dọc,
        kết hợp với justify-content: center -> item sẽ nằm chính giữa container) 
        - flex-start
        - flex-end
        - center */
    align-self: center; /* 
        - Giống với align-content, nhưng được sử dụng cho element con(flex_item) */
    flex-grow: 50px; /*
        Giúp tăng đổi kích thước của main_size(của flex-item) */
    flex-shrink: 50px; /* 
        Ngược lại với flex-grow, làm giảm kích thước của flex-item */
    flex: 1; /*
        Viết tắt của: flex-basis, flex-grow, flex-shrink */
    order: 1; /* 
        Quyết định thứ tự của flex-item nào trước hay sau  */
    flex-flow: column; /* 
        Viết tắt của: flex-wrap và flex-direction */

}

/* Ví dụ về căn giữa 1 item */

.div-container{
    background-image: url(./Common/image_NoteCSS/12_centrer_element_can_giua_doi_tuong.png);
    width: 50px;
    height: 50px;
    display: flex;
}

.h3-flex-item{
    margin: auto;
}


/* 13. HTML display value (Block and Inline Element) 
    Text-aline có thể ảnh hưởng đến các element nào:
        - Block-Level: 
            - <div>, <p>, <header>, <footer>, <section>,
            - Các text bên trong sẽ bị ảnh hưởng
        - Inline-Level:
            - <span>, <a>, <strong>, <em>
            - khi áp dụng text-aline chỉ có text bên trong phần tử bị ảnh hưởng, chứ ko phải toàn bộ element
        - Inline-Block:
            - chỉ căn chỉnh văn bản trong element
        => Tóm lại, text-align ảnh hưởng đến các phần tử chứa văn bản (kể cả phần tử block-level, inline-level và inline-block) 
        trong khi văn bản đó không phải là một phần tử inline-level độc lập.
*/







